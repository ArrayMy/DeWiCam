apply plugin: 'com.android.application'
android {
    compileSdkVersion 31
    buildToolsVersion "31"
    defaultConfig {
        applicationId "org.usslab.decam"
        minSdkVersion 31
        targetSdkVersion 31
        versionCode 01
        versionName "snykybriky"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"}
    buildTypes {
        debug{
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {

    androidTestImplementation ('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'})

//    compile 'com.android.support:support-v4:25.2.0'
//    compile 'com.android.support:design:25.2.0'
//    compile 'com.github.angads25:filepicker:1.1.0'
//    compile 'com.android.support:recyclerview-v7:25.2.0'
//    compile 'com.android.support:cardview-v7:25.2.0'
//    compile 'com.github.medyo:android-about-page:1.1.1'
//    compile 'com.google.code.gson:gson:2.8.0'
//    compile 'com.android.support.constraint:constraint-layout:1.0.2'
//    compile 'com.github.lecho:hellocharts-library:1.5.8@aar'
    testImplementation  group: 'junit', name: 'junit', version: '4.13.2'
}
//def getSelfDefinedVersion(type) {
//    int aa = 1
//    int bb = 1
//    Process process = "git rev-list --count HEAD".execute()
//    process.waitFor()
//    int cccc = process.toInteger()
//
//    if ("code".equals(type)) {
//        aa * 1000000 + bb * 10000 + cccc
//        //main version code
//    } else if ("name".equals(type)) {
//        String today = new Date().format("yyMMdd")
//        process = "git describe --always".execute()
//        process.waitFor()
//        String sha1 = process.getText().trim()
//        "$aa.$bb.$cccc.$today.$sha1"
//    }
//}
//
//def getGitBranch() {
//    Process process = "git symbolic-ref --short HEAD".execute()
//    process.waitFor()
//    String brachname = process.getText().trim()
//    brachname
//}
